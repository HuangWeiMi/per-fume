{"version":3,"file":"perfume.umd.js","sources":["../src/emulated-performance.ts","../node_modules/tti-polyfill/ [synthetic:util/global] ","../node_modules/tti-polyfill/ [synthetic:util/defineproperty] ","../node_modules/tti-polyfill/ [synthetic:es6/symbol] ","../node_modules/tti-polyfill/ [synthetic:es6/util/makeiterator] ","../node_modules/tti-polyfill/ [synthetic:es6/util/arrayfromiterable] ","../node_modules/tti-polyfill/ [synthetic:es6/util/arrayfromiterator] ","../node_modules/tti-polyfill/src/activityTrackerUtils.js","../node_modules/tti-polyfill/src/firstConsistentlyInteractiveCore.js","../node_modules/tti-polyfill/src/firstConsistentlyInteractiveDetector.js","../node_modules/tti-polyfill/src/umd-wrapper.js","../node_modules/tti-polyfill/src/index.js","../src/performance.ts","../src/perfume.ts"],"sourcesContent":["import PerformImpl from \"./performance-impl\";\n\ndeclare global {}\n\ninterface PerformancePaintTiming {\n  name: string;\n  entryType: string;\n  startTime: number;\n  duration: number;\n}\n\nexport default class EmulatedPerformance implements PerformImpl {\n  public config: any;\n\n  /**\n   * When performance API is not available\n   * returns Date.now that is limited to one-millisecond resolution.\n   *\n   * @type {number}\n   */\n  public now(): number {\n    return Date.now() / 1000;\n  }\n\n  /**\n   * @param {string} metricName\n   * @param {string} type\n   */\n  public mark(metricName: string, type: string) {\n    // Timeline won't be marked\n  }\n\n  /**\n   * @param {string} metricName\n   * @param {object} metrics\n   */\n  public measure(metricName: string, metrics: object): number {\n    return this.getDurationByMetric(metricName, metrics);\n  }\n\n  /**\n   * First Paint is essentially the paint after which\n   * the biggest above-the-fold layout change has happened.\n   * Uses setTimeout to retrieve FCP\n   *\n   * @param {any} cb\n   */\n  public firstContentfulPaint(cb: any) {\n    setTimeout(() => {\n      cb(this.getFirstPaint());\n    });\n  }\n\n  /**\n   * Get the duration of the timing metric or -1 if there a measurement has\n   * not been made by now() fallback.\n   *\n   * @param {string} metricName\n   * @param {metrics} any\n   */\n  private getDurationByMetric(metricName: string, metrics: any) {\n    const duration = metrics[metricName].end - metrics[metricName].start;\n    return duration || 0;\n  }\n\n  /**\n   * http://msdn.microsoft.com/ff974719\n   * developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/navigationStart\n   *\n   * @param {PerformancePaintTiming} performancePaintTiming\n   */\n  private getFirstPaint(): PerformancePaintTiming {\n    const navTiming = window.performance.timing;\n    const performancePaintTiming = {\n      duration: 0,\n      entryType: \"paint\",\n      name: \"first-contentful-paint\",\n      startTime: 0,\n    };\n    if (navTiming && navTiming.navigationStart !== 0) {\n      performancePaintTiming.startTime = Date.now() - navTiming.navigationStart;\n    }\n    return performancePaintTiming;\n  }\n}\n",{"errno":-2,"code":"ENOENT","syscall":"open","path":"/Users/leonardo/Desktop/perfume.js/node_modules/tti-polyfill/[synthetic:util/global]"},{"errno":-2,"code":"ENOENT","syscall":"open","path":"/Users/leonardo/Desktop/perfume.js/node_modules/tti-polyfill/[synthetic:util/defineproperty]"},{"errno":-2,"code":"ENOENT","syscall":"open","path":"/Users/leonardo/Desktop/perfume.js/node_modules/tti-polyfill/[synthetic:es6/symbol]"},{"errno":-2,"code":"ENOENT","syscall":"open","path":"/Users/leonardo/Desktop/perfume.js/node_modules/tti-polyfill/[synthetic:es6/util/makeiterator]"},{"errno":-2,"code":"ENOENT","syscall":"open","path":"/Users/leonardo/Desktop/perfume.js/node_modules/tti-polyfill/[synthetic:es6/util/arrayfromiterable]"},{"errno":-2,"code":"ENOENT","syscall":"open","path":"/Users/leonardo/Desktop/perfume.js/node_modules/tti-polyfill/[synthetic:es6/util/arrayfromiterator]"},"// Copyright 2017 Google Inc. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\nlet uniqueId = 0;\n\n\n/**\n * Overrides the native XHR send method in order to keep track of in-flight\n * network requests.\n * @param {!Function} beforeXHRSendCb\n * @param {!Function} onRequestCompletedCb\n */\nexport function patchXMLHTTPRequest(beforeXHRSendCb, onRequestCompletedCb) {\n  const send = XMLHttpRequest.prototype.send;\n  const requestId = uniqueId++;\n\n  XMLHttpRequest.prototype.send = function(...args) { // No arrow function.\n    beforeXHRSendCb(requestId);\n    this.addEventListener('readystatechange', () => {\n      // readyState 4 corresponds to 'DONE'\n      if (this.readyState === 4) onRequestCompletedCb(requestId);\n    });\n    return send.apply(this, args);\n  };\n}\n\n\n/**\n * Overrides the native fetch() in order to keep track of in-flight network\n * requests.\n * @param {!Function} beforeRequestCb\n * @param {!Function} afterRequestCb\n */\nexport function patchFetch(beforeRequestCb, afterRequestCb) {\n  const originalFetch = fetch;\n\n  // TODO(philipwalton): assign this to a property of the global variable\n  // explicitely rather than implicitely.\n  // eslint-disable-next-line no-global-assign\n  fetch = (...args) => {\n    return new Promise((resolve, reject) => {\n      const requestId = uniqueId++;\n      beforeRequestCb(requestId);\n      originalFetch(...args).then(\n          (value) => {\n            afterRequestCb(requestId);\n            resolve(value);\n          },\n          (err) => {\n            afterRequestCb(err);\n            reject(err);\n          });\n    });\n  };\n}\n\n\n/** @type {!Array<string>} */\nconst requestCreatingNodeNames =\n    ['img', 'script', 'iframe', 'link', 'audio', 'video', 'source'];\n\n\n/**\n * Determines if a node or its descendants match one of the passed node names.\n * @param {!Array<!Node>|!NodeList<!Node>} nodes\n * @param {!Array<string>} nodeNames\n * @return {boolean}\n */\nfunction subtreeContainsNodeName(nodes, nodeNames) {\n  for (const node of nodes) {\n    if (nodeNames.includes(node.nodeName.toLowerCase()) ||\n        subtreeContainsNodeName(node.children, nodeNames)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n\n/**\n * Start observing DOM mutations for added nodes that may initiate network\n * requests.\n * @param {!Function} callback\n * @return {!MutationObserver}\n */\nexport function observeResourceFetchingMutations(callback) {\n  const mutationObserver = new MutationObserver((mutations) => {\n    // Typecast to fix: https://github.com/google/closure-compiler/issues/2539\n    // eslint-disable-next-line no-self-assign\n    mutations = /** @type {!Array<!MutationRecord>} */ (mutations);\n\n    for (const mutation of mutations) {\n      if (mutation.type == 'childList' &&\n          subtreeContainsNodeName(\n              mutation.addedNodes, requestCreatingNodeNames)) {\n        callback(mutation);\n      } else if (mutation.type == 'attributes' &&\n          requestCreatingNodeNames.includes(\n              mutation.target.tagName.toLowerCase())) {\n        callback(mutation);\n      }\n    }\n  });\n\n  mutationObserver.observe(document, {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    attributeFilter: ['href', 'src'],\n  });\n\n  return mutationObserver;\n}\n","// Copyright 2017 Google Inc. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * Computes the first consistently interactive value...\n * @param {number} searchStart\n * @param {number} minValue\n * @param {number} lastKnownNetwork2Busy\n * @param {number} currentTime\n * @param {!Array<{start: (number), end: (number)}>} longTasks\n * @return {number|null}\n */\nexport const computeFirstConsistentlyInteractive =\n    (searchStart, minValue, lastKnownNetwork2Busy, currentTime, longTasks) => {\n  // Have not reached network 2-quiet yet.\n  if ((currentTime - lastKnownNetwork2Busy) < 5000) return null;\n\n  const maybeFCI = longTasks.length === 0 ?\n      searchStart : longTasks[longTasks.length - 1].end;\n\n  // Main thread has not been quiet for long enough.\n  if (currentTime - maybeFCI < 5000) return null;\n\n  return Math.max(maybeFCI, minValue);\n};\n\n\n/**\n * Computes the time (in milliseconds since requestStart) that the network was\n * last known to have >2 requests in-flight.\n * @param {!Array<number>} incompleteRequestStarts\n * @param {!Array<{start: (number), end: (number)}>} observedResourceRequests\n * @return {number}\n */\nexport const computeLastKnownNetwork2Busy =\n      (incompleteRequestStarts, observedResourceRequests) => {\n  if (incompleteRequestStarts.length > 2) return performance.now();\n\n  const endpoints = [];\n  for (const req of observedResourceRequests) {\n    endpoints.push({\n      timestamp: req.start,\n      type: 'requestStart',\n    });\n    endpoints.push({\n      timestamp: req.end,\n      type: 'requestEnd',\n    });\n  }\n\n  for (const ts of incompleteRequestStarts) {\n    endpoints.push({\n      timestamp: ts,\n      type: 'requestStart',\n    });\n  }\n\n  endpoints.sort((a, b) => a.timestamp - b.timestamp);\n\n  let currentActive = incompleteRequestStarts.length;\n\n  for (let i = endpoints.length - 1; i >= 0; i--) {\n    const endpoint = endpoints[i];\n    switch (endpoint.type) {\n      case 'requestStart':\n        currentActive--;\n        break;\n      case 'requestEnd':\n        currentActive++;\n        if (currentActive > 2) {\n          return endpoint.timestamp;\n        }\n        break;\n      default:\n        throw Error('Internal Error: This should never happen');\n    }\n  }\n\n  // If we reach here, we were never network 2-busy.\n  return 0;\n};\n","// Copyright 2017 Google Inc. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/* global PerformanceObserver */\n\n\nimport * as activityTrackerUtils from './activityTrackerUtils.js';\nimport {log} from './debug.js';\nimport * as firstConsistentlyInteractiveCore\n    from './firstConsistentlyInteractiveCore.js';\n\n\n/**\n * Class to detect first consistently interactive.\n */\nexport default class FirstConsistentlyInteractiveDetector {\n  /**\n   * @param {!FirstConsistentlyInteractiveDetectorInit=} config\n   */\n  constructor(config = {}) {\n    this._useMutationObserver = !!config.useMutationObserver;\n\n    // If minValue is null, by default it is DOMContentLoadedEnd.\n    this._minValue = config.minValue || null;\n\n    /** @type {Array<PerformanceEntry>|undefined} */\n    const snippetEntries = window.__tti && window.__tti.e;\n\n    /** @type {PerformanceObserver|undefined} */\n    const snippetObserver = window.__tti && window.__tti.o;\n\n    // If we recorded some long tasks before this class was initialized,\n    // consume them now.\n    if (snippetEntries) {\n      log(`Consuming the long task entries already recorded.`);\n\n      this._longTasks = snippetEntries.map((performanceEntry) => {\n        return {\n          start: performanceEntry.startTime,\n          end: performanceEntry.startTime + performanceEntry.duration,\n        };\n      });\n    } else {\n      this._longTasks = [];\n    }\n\n    // If we had a long task observer attached by the snippet, disconnect it\n    // here. We will be adding a new long task observer soon with a more\n    // complex callback.\n    if (snippetObserver) {\n      snippetObserver.disconnect();\n    }\n\n    this._networkRequests = [];\n    this._incompleteJSInitiatedRequestStartTimes = new Map();\n\n    this._timerId = null;\n    this._timerActivationTime = -Infinity;\n\n    // Timer tasks are only scheduled when detector is enabled.\n    this._scheduleTimerTasks = false;\n\n    /** @type {?Function} */\n    this._firstConsistentlyInteractiveResolver = null;\n\n    /** @type {?PerformanceObserver} */\n    this._performanceObserver = null;\n\n    /** @type {?MutationObserver} */\n    this._mutationObserver = null;\n\n    this._registerListeners();\n  }\n\n  /**\n   * Starts checking for a first consistently interactive time and returns a\n   * promise that resolves to the found time.\n   * @return {!Promise<number>}\n   */\n  getFirstConsistentlyInteractive() {\n    return new Promise((resolve, reject) => {\n      this._firstConsistentlyInteractiveResolver = resolve;\n\n      if (document.readyState == 'complete') {\n        this.startSchedulingTimerTasks();\n      } else {\n        window.addEventListener('load', () => {\n          // You can use this to set a custom minimum value.\n          // this.setMinValue(20000);\n\n          this.startSchedulingTimerTasks();\n        });\n      }\n    });\n  }\n\n  /**\n   * Starts scheduling the timer that checks for network quiescence (a 5-second\n   * window of no more than 2 in-flight network requests).\n   */\n  startSchedulingTimerTasks() {\n    log(`Enabling FirstConsistentlyInteractiveDetector`);\n\n    this._scheduleTimerTasks = true;\n\n    const lastLongTaskEnd = this._longTasks.length > 0 ?\n        this._longTasks[this._longTasks.length - 1].end : 0;\n\n    const lastKnownNetwork2Busy =\n        firstConsistentlyInteractiveCore.computeLastKnownNetwork2Busy(\n            this._incompleteRequestStarts, this._networkRequests);\n\n    this.rescheduleTimer(\n        Math.max(lastKnownNetwork2Busy + 5000, lastLongTaskEnd));\n  }\n\n  /**\n   * Setter for the `_minValue` property.\n   * @param {number} minValue\n   */\n  setMinValue(minValue) {\n    this._minValue = minValue;\n  }\n\n  /**\n   * Resets the timer that checks for network quiescence.\n   * @param {number} earliestTime A timestamp in ms, and the time is relative\n   *     to navigationStart.\n   */\n  rescheduleTimer(earliestTime) {\n    // Check if ready to start looking for firstConsistentlyInteractive\n    if (!this._scheduleTimerTasks) {\n      log(`startSchedulingTimerTasks must be called before ` +\n          `calling rescheduleTimer`);\n\n      return;\n    }\n\n    log(`Attempting to reschedule FirstConsistentlyInteractive ` +\n        `check to ${earliestTime}`);\n    log(`Previous timer activation time: ${this._timerActivationTime}`);\n\n    if (this._timerActivationTime > earliestTime) {\n      log(`Current activation time is greater than attempted ` +\n          `reschedule time. No need to postpone.`);\n\n      return;\n    }\n    clearTimeout(this._timerId);\n    this._timerId = setTimeout(() => {\n      this._checkTTI();\n    }, earliestTime - performance.now());\n    this._timerActivationTime = earliestTime;\n\n    log(`Rescheduled firstConsistentlyInteractive check at ${earliestTime}`);\n  }\n\n  /**\n   * Removes all timers and event listeners.\n   */\n  disable() {\n    log(`Disabling FirstConsistentlyInteractiveDetector`);\n\n    clearTimeout(this._timerId);\n    this._scheduleTimerTasks = false;\n    this._unregisterListeners();\n  }\n\n  /**\n   * Adds\n   */\n  _registerPerformanceObserver() {\n    this._performanceObserver = new PerformanceObserver((entryList) => {\n      const entries = entryList.getEntries();\n      for (const entry of entries) {\n        if (entry.entryType === 'resource') {\n          this._networkRequestFinishedCallback(entry);\n        }\n        if (entry.entryType === 'longtask') {\n          this._longTaskFinishedCallback(entry);\n        }\n      }\n    });\n    this._performanceObserver.observe({entryTypes: ['longtask', 'resource']});\n  }\n\n  /**\n   * Registers listeners to detect XHR, fetch, resource timing entries, and\n   * DOM mutations to detect long tasks and network quiescence.\n   */\n  _registerListeners() {\n    activityTrackerUtils.patchXMLHTTPRequest(\n        this._beforeJSInitiatedRequestCallback.bind(this),\n        this._afterJSInitiatedRequestCallback.bind(this));\n\n    activityTrackerUtils.patchFetch(\n        this._beforeJSInitiatedRequestCallback.bind(this),\n        this._afterJSInitiatedRequestCallback.bind(this));\n\n    this._registerPerformanceObserver();\n\n    if (this._useMutationObserver) {\n      this._mutationObserver =\n          activityTrackerUtils.observeResourceFetchingMutations(\n              this._mutationObserverCallback.bind(this));\n    }\n  }\n\n  /**\n   * Removes all added listeners.\n   */\n  _unregisterListeners() {\n    // We will leave the XHR / Fetch objects the way they were,\n    // since we cannot guarantee they were not modified further in between.\n    // Only unregister performance observers.\n    if (this._performanceObserver) this._performanceObserver.disconnect();\n    if (this._mutationObserver) this._mutationObserver.disconnect();\n  }\n\n  /**\n   * A callback to be run before any new XHR requests. This adds the request\n   * to a map so in-flight requests can be tracked.\n   * @param {string} requestId\n   */\n  _beforeJSInitiatedRequestCallback(requestId) {\n    log(`Starting JS initiated request. Request ID: ${requestId}`);\n\n    this._incompleteJSInitiatedRequestStartTimes.set(\n        requestId, performance.now());\n\n    log(`Active XHRs: ${this._incompleteJSInitiatedRequestStartTimes.size}`);\n  }\n\n  /**\n   * A callback to be run once any XHR requests have completed. This removes\n   * the request from the in-flight request map.\n   * @param {string} requestId\n   */\n  _afterJSInitiatedRequestCallback(requestId) {\n    log(`Completed JS initiated request with request ID: ${requestId}`);\n\n    this._incompleteJSInitiatedRequestStartTimes.delete(requestId);\n\n    log(`Active XHRs: ${this._incompleteJSInitiatedRequestStartTimes.size}`);\n  }\n\n  /**\n   * A callback to be run once new resource timing entries are observed.\n   * This adds the entry to an array and resets the timeout detecting the\n   * quiet window.\n   * @param {PerformanceEntry} performanceEntry\n   */\n  _networkRequestFinishedCallback(performanceEntry) {\n    log(`Network request finished`, performanceEntry);\n\n    this._networkRequests.push({\n      start: performanceEntry.fetchStart,\n      end: performanceEntry.responseEnd,\n    });\n    this.rescheduleTimer(\n        firstConsistentlyInteractiveCore.computeLastKnownNetwork2Busy(\n            this._incompleteRequestStarts, this._networkRequests) + 5000);\n  }\n\n  /**\n   * A callback to be run once new long tasks are observed. This resets the\n   * timeout detecting the quiet window.\n   * @param {PerformanceEntry} performanceEntry\n   */\n  _longTaskFinishedCallback(performanceEntry) {\n    log(`Long task finished`, performanceEntry);\n\n    const taskEndTime = performanceEntry.startTime +\n          performanceEntry.duration;\n    this._longTasks.push({\n      start: performanceEntry.startTime,\n      end: taskEndTime,\n    });\n    this.rescheduleTimer(taskEndTime + 5000);\n  }\n\n  /**\n   * A callback to be run once any DOM elements are added that would initiate\n   * a new network request. This resets the timeout detecting the quiet window.\n   * @param {!MutationRecord} mutationRecord\n   */\n  _mutationObserverCallback(mutationRecord) {\n    log(`Potentially network resource fetching mutation detected`,\n        mutationRecord);\n\n    log(`Pushing back FirstConsistentlyInteractive check by 5 seconds.`);\n\n    this.rescheduleTimer(performance.now() + 5000);\n  }\n\n  /**\n   * Returns either a manually set min value or the time since\n   * domContentLoadedEventEnd and navigationStart. If the\n   * domContentLoadedEventEnd data isn't available, `null` is returned.\n   * @return {number|null}\n   */\n  _getMinValue() {\n    if (this._minValue) return this._minValue;\n\n    if (performance.timing.domContentLoadedEventEnd) {\n      const {domContentLoadedEventEnd, navigationStart} = performance.timing;\n      return domContentLoadedEventEnd - navigationStart;\n    }\n\n    return null;\n  }\n\n  /**\n   * Gets a list of all in-flight requests.\n   * @return {!Array}\n   */\n  get _incompleteRequestStarts() {\n    return [...this._incompleteJSInitiatedRequestStartTimes.values()];\n  }\n\n  /**\n   * Checks to see if a first consistently interactive time has been found.\n   * If one has been found, the promise resolver is invoked with the time. If\n   * no time has been found, the timeout detecting the quiet window is reset.\n   */\n  _checkTTI() {\n    log(`Checking if First Consistently Interactive was reached...`);\n\n    const navigationStart = performance.timing.navigationStart;\n    const lastBusy =\n        firstConsistentlyInteractiveCore.computeLastKnownNetwork2Busy(\n            this._incompleteRequestStarts, this._networkRequests);\n\n    // First paint is not available in non-chrome browsers at the moment.\n    const firstPaint = window.chrome && window.chrome.loadTimes ?\n        (window.chrome.loadTimes().firstPaintTime * 1000 - navigationStart) : 0;\n\n    const searchStart = firstPaint || (\n        performance.timing.domContentLoadedEventEnd - navigationStart);\n\n    const minValue = this._getMinValue();\n    const currentTime = performance.now();\n\n    // Ideally we will only start scheduling timers after DOMContentLoaded and\n    // this case should never be hit.\n    if (minValue === null) {\n      log(`No usable minimum value yet. Postponing check.`);\n\n      this.rescheduleTimer(Math.max(lastBusy + 5000, currentTime + 1000));\n    }\n\n    log(`Parameter values:`);\n    log(`NavigationStart`, navigationStart);\n    log(`lastKnownNetwork2Busy`, lastBusy);\n    log(`Search Start`, searchStart);\n    log(`Min Value`, minValue);\n    log(`Last busy`, lastBusy);\n    log(`Current time`, currentTime);\n    log(`Long tasks`, this._longTasks);\n    log(`Incomplete JS Request Start Times`, this._incompleteRequestStarts);\n    log(`Network requests`, this._networkRequests);\n\n    const maybeFCI =\n        firstConsistentlyInteractiveCore.computeFirstConsistentlyInteractive(\n            searchStart, /** @type {number} */ (minValue), lastBusy,\n            currentTime, this._longTasks);\n\n    if (maybeFCI) {\n      this._firstConsistentlyInteractiveResolver(\n          /** @type {number} */ (maybeFCI));\n      this.disable();\n    }\n\n    // First Consistently Interactive was not reached for whatever reasons.\n    // Check again in one second. Eventually we should become confident enough\n    // in our scheduler logic to get rid of this step.\n    log(`Could not detect First Consistently Interactive. ` +\n        `Retrying in 1 second.`);\n\n    this.rescheduleTimer(performance.now() + 1000);\n  }\n}\n","// Copyright 2017 Google Inc. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/* global define, module */\n\n\nimport {getFirstConsistentlyInteractive} from './index.js';\n\n\nconst moduleExport = {getFirstConsistentlyInteractive};\n\n\nif (typeof module != 'undefined' && module.exports) {\n  module.exports = moduleExport;\n} else if (typeof define === 'function' && define.amd) {\n  define('ttiPolyfill', [], () => moduleExport);\n} else {\n  window.ttiPolyfill = moduleExport;\n}\n","// Copyright 2017 Google Inc. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\nimport FirstConsistentlyInteractiveDetector\n    from './firstConsistentlyInteractiveDetector.js';\n\n\n/**\n * Returns a promise that resolves to the first consistently interactive time\n * (in milliseconds) or null if the browser doesn't support the features\n * required for detection.\n * @param {!FirstConsistentlyInteractiveDetectorInit=} opts Configuration\n *     options for the polyfill\n * @return {!Promise} TODO(philipwalton): for some reason the type\n *     {!Promise<(number|null)>} isn't working here, check if this is fixed in\n *     a new version of closure compiler.\n */\nexport const getFirstConsistentlyInteractive = (opts = {}) => {\n  if ('PerformanceLongTaskTiming' in window) {\n    const detector = new FirstConsistentlyInteractiveDetector(opts);\n    return detector.getFirstConsistentlyInteractive();\n  } else {\n    return Promise.resolve(null);\n  }\n};\n","import ttiPolyfill from \"tti-polyfill\";\nimport PerformImpl from \"./performance-impl\";\n\ndeclare global {\n  interface Window {\n    chrome: any;\n  }\n}\ndeclare const PerformanceObserver: any;\ndeclare interface PerformanceObserverEntryList {\n  getEntries: any;\n  getEntriesByName: any;\n  getEntriesByType: any;\n}\n\nexport default class Performance implements PerformImpl {\n\n  /**\n   * True if the browser supports the Navigation Timing API,\n   * User Timing API and the PerformanceObserver Interface.\n   * In Safari, the User Timing API (performance.mark()) is not available,\n   * so the DevTools timeline will not be annotated with marks.\n   * Support: developer.mozilla.org/en-US/docs/Web/API/Performance/mark\n   * Support: developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver\n   *\n   * @type {boolean}\n   */\n  public static supported(): boolean {\n    return window.performance\n           && !!performance.now\n           && !!performance.mark;\n  }\n\n  /**\n   * For now only Chrome fully support the PerformanceObserver interface\n   * and the entryType \"paint\".\n   * Firefox 58: https://bugzilla.mozilla.org/show_bug.cgi?id=1403027\n   *\n   * @type {boolean}\n   */\n  public static supportedPerformanceObserver(): boolean {\n    return window.chrome;\n  }\n\n  /**\n   * True if the browser supports the PerformanceLongTaskTiming interface.\n   * Support: developer.mozilla.org/en-US/docs/Web/API/PerformanceLongTaskTiming\n   *\n   * @type {boolean}\n   */\n  public static supportedLongTask(): boolean {\n    return \"PerformanceLongTaskTiming\" in window;\n  }\n\n  public timeToInteractiveDuration: number = 0;\n  public config: any;\n  private ttiPolyfill: any;\n  private perfObserver: any;\n\n  constructor() {\n    this.ttiPolyfill = ttiPolyfill;\n  }\n\n  /**\n   * When performance API available\n   * returns a DOMHighResTimeStamp, measured in milliseconds, accurate to five\n   * thousandths of a millisecond (5 microseconds).\n   * @type {number}\n   */\n  public now(): number {\n    return window.performance.now();\n  }\n\n  /**\n   * @param {string} metricName\n   * @param {string} type\n   */\n  public mark(metricName: string, type: string) {\n    const mark = `mark_${metricName}_${type}`;\n    window.performance.mark(mark);\n  }\n\n  /**\n   * @param {string} metricName\n   * @param {object} metrics\n   * @param {string} endMark\n   */\n  public measure(metricName: string, metrics: object): any {\n    const startMark = `mark_${metricName}_start`;\n    const endMark = `mark_${metricName}_end`;\n    window.performance.measure(metricName, startMark, endMark);\n    return this.getDurationByMetric(metricName, metrics);\n  }\n\n  /**\n   * First Paint is essentially the paint after which\n   * the biggest above-the-fold layout change has happened.\n   * PerformanceObserver subscribes to performance events as they happen\n   * and respond to them asynchronously.\n   * entry.name will be either 'first-paint' or 'first-contentful-paint'\n   *\n   * @param {any} cb\n   */\n  public firstContentfulPaint(cb: any): any {\n    this.perfObserver = new PerformanceObserver(this.performanceObserverCb.bind(this, cb));\n    this.perfObserver.observe({entryTypes: [\"paint\"]});\n  }\n\n  /**\n   * Get the duration of the timing metric or -1 if there a measurement has\n   * not been made by the User Timing API\n   *\n   * @param {string} metricName\n   * @param {any} metrics\n   */\n  private getDurationByMetric(metricName: string, metrics: any) {\n    const entry = this.getMeasurementForGivenName(metricName);\n    if (entry && entry.entryType === \"measure\") {\n      return entry.duration;\n    }\n    return -1;\n  }\n\n  /**\n   * Return the last PerformanceEntry objects for the given name.\n   *\n   * @param {string} metricName\n   */\n  private getMeasurementForGivenName(metricName: string) {\n    const entries = window.performance.getEntriesByName(metricName);\n    return entries[entries.length - 1];\n  }\n\n  /**\n   * @param {any} cb\n   * @param {PerformanceObserverEntryList} entryList\n   */\n  private performanceObserverCb(cb: any, entryList: PerformanceObserverEntryList) {\n    const entries = entryList.getEntries()\n    .filter((performancePaintTiming: any) => {\n      return performancePaintTiming.name === \"first-contentful-paint\";\n    });\n    if (entries.length) {\n      cb(entries[0]);\n      this.perfObserver.disconnect();\n    }\n  }\n\n  /**\n   * The polyfill exposes a getFirstConsistentlyInteractive() method,\n   * which returns a promise that resolves with the TTI value.\n   *\n   * The getFirstConsistentlyInteractive() method accepts an optional\n   * startTime configuration option, allowing you to specify a lower bound\n   * for which you know your app cannot be interactive before.\n   * By default the polyfill uses DOMContentLoaded as the start time,\n   * but it's often more accurate to use something like the moment your hero elements\n   * are visible or the point when you know all your event listeners have been added.\n   *\n   * @param {number} minValue\n   * @param {any} cb\n   */\n  private timeToInteractive(minValue: number, cb: any) {\n    this.ttiPolyfill.getFirstConsistentlyInteractive({ minValue }).then(cb);\n  }\n}\n","/*!\n * Perfume.js v0.6.3 (http://zizzamia.github.io/perfume)\n * Copyright 2018 The Perfume Authors (https://github.com/Zizzamia/perfume.js/graphs/contributors)\n * Licensed under MIT (https://github.com/Zizzamia/perfume.js/blob/master/LICENSE)\n * @license\n */\nimport EmulatedPerformance from \"./emulated-performance\";\nimport Performance from \"./performance\";\nimport PerformImpl from \"./performance-impl\";\n\ndeclare global {\n  interface Window {\n    ga: any;\n  }\n}\n\nexport default class Perfume {\n  public config: {\n    firstContentfulPaint: boolean,\n    googleAnalytics: {\n      enable: boolean;\n      timingVar: string;\n    },\n    logPrefix: string,\n    logging: boolean,\n    timeToInteractive: boolean,\n    timeToInteractiveCb?: any,\n  } = {\n    firstContentfulPaint: false,\n    googleAnalytics: {\n      enable: false,\n      timingVar: \"name\",\n    },\n    logPrefix: \"⚡️ Perfume.js:\",\n    logging: true,\n    timeToInteractive: false,\n  };\n  public firstContentfulPaintDuration: number = 0;\n  public timeToInteractiveDuration: number = 0;\n  private metrics: {\n    [key: string]: {\n      start: number;\n      end: number;\n    };\n  } = {};\n  private perf: any;\n  private perfEmulated: any;\n\n  constructor(options: any = {}) {\n    this.config = Object.assign({}, this.config, options);\n\n    // Init performance implementation\n    this.perf = Performance.supported() ? new Performance() : new EmulatedPerformance();\n    this.perf.config = this.config;\n\n    // Init First Contentful Paint\n    if (Performance.supportedPerformanceObserver()) {\n      this.perf.firstContentfulPaint(this.firstContentfulPaintCb.bind(this));\n    } else {\n      this.perfEmulated = new EmulatedPerformance();\n      this.perfEmulated.firstContentfulPaint(this.firstContentfulPaintCb.bind(this));\n    }\n  }\n\n  /**\n   * Start performance measurement\n   *\n   * @param {string} metricName\n   */\n  public start(metricName: string) {\n    if (!this.checkMetricName(metricName)) {\n      return;\n    }\n    if (this.metrics[metricName]) {\n      global.console.warn(this.config.logPrefix, \"Recording already started.\");\n      return;\n    }\n    this.metrics[metricName] = {\n      end: 0,\n      start: this.perf.now(),\n    };\n    this.perf.mark(metricName, \"start\");\n  }\n\n  /**\n   * End performance measurement\n   *\n   * @param {string} metricName\n   */\n  public end(metricName: string) {\n    if (!this.checkMetricName(metricName)) {\n      return;\n    }\n    if (!this.metrics[metricName]) {\n      global.console.warn(this.config.logPrefix, \"Recording already stopped.\");\n      return;\n    }\n    this.metrics[metricName].end = this.perf.now();\n    this.perf.mark(metricName, \"end\");\n    const duration = this.perf.measure(metricName, this.metrics);\n    if (this.config.logging) {\n      this.log(metricName, duration);\n    }\n    delete this.metrics[metricName];\n    this.sendTiming(metricName, duration);\n    return duration;\n  }\n\n  /**\n   * End performance measurement after first paint from the beging of it\n   *\n   * @param {string} metricName\n   */\n  public endPaint(metricName: string) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const duration = this.end(metricName);\n        resolve(duration);\n      });\n    });\n  }\n\n  /**\n   * Coloring Text in Browser Console\n   *\n   * @param {string} metricName\n   * @param {number} duration\n   */\n  public log(metricName: string, duration: number) {\n    if (!metricName) {\n      global.console.warn(this.config.logPrefix, \"Please provide a metric name\");\n      return;\n    }\n    const durationMs = duration.toFixed(2);\n    const style = \"color: #ff6d00;font-size:12px;\";\n    const text = `%c ${this.config.logPrefix} ${metricName} ${durationMs} ms`;\n    global.console.log(text, style);\n  }\n\n  /**\n   * @param {string} metricName\n   */\n  private checkMetricName(metricName: string) {\n    if (metricName) {\n      return true;\n    }\n    global.console.warn(this.config.logPrefix, \"Please provide a metric name\");\n    return false;\n  }\n\n  /**\n   * @param {object} entry\n   */\n  private firstContentfulPaintCb(entry: any) {\n    if (this.config.firstContentfulPaint) {\n      this.logFCP(entry.startTime);\n    }\n    if (Performance.supported()\n        && Performance.supportedPerformanceObserver()\n        && Performance.supportedLongTask()\n        && this.config.timeToInteractive) {\n      this.perf.timeToInteractive(entry.startTime, this.timeToInteractiveCb.bind(this));\n    }\n  }\n\n  /**\n   * @param {number} timeToInteractive\n   */\n  private timeToInteractiveCb(timeToInteractive: number) {\n    this.timeToInteractiveDuration = timeToInteractive;\n    if (this.timeToInteractiveDuration) {\n      this.log(\"Time to interactive\", this.timeToInteractiveDuration);\n    }\n    if (this.config.timeToInteractiveCb) {\n      this.config.timeToInteractiveCb(this.timeToInteractiveDuration);\n    }\n    this.sendTiming(\"timeToInteractive\", this.timeToInteractiveDuration);\n  }\n\n  /**\n   * @param {number} duration\n   */\n  private logFCP(duration: number) {\n    this.firstContentfulPaintDuration = duration;\n    this.log(\"First Contentful Paint\", this.firstContentfulPaintDuration);\n    this.sendTiming(\"firstContentfulPaint\", this.firstContentfulPaintDuration);\n  }\n\n  /**\n   * Sends the User timing measure to Google Analytics.\n   * ga('send', 'timing', [timingCategory], [timingVar], [timingValue])\n   * timingCategory: metricName\n   * timingVar: googleAnalytics.timingVar\n   * timingValue: The value of duration rounded to the nearest integer\n   * @param {string} metricName\n   * @param {number} duration\n   */\n  private sendTiming(metricName: string, duration: number) {\n    if (!this.config.googleAnalytics.enable) {\n      return;\n    }\n    if (!window.ga) {\n      global.console.warn(this.config.logPrefix, \"Google Analytics has not been loaded\");\n      return;\n    }\n    const durationInteger = Math.round(duration);\n    window.ga(\"send\", \"timing\", metricName, this.config.googleAnalytics.timingVar, durationInteger);\n  }\n}\n"],"names":["EmulatedPerformance","Date","now","metricName","type","metrics","this","getDurationByMetric","cb","setTimeout","_this","getFirstPaint","end","start","navTiming","window","performance","timing","performancePaintTiming","duration","entryType","name","startTime","navigationStart","$jscomp.global","global","$jscomp.defineProperty","Object","a","b","c","Array","$jscomp.initSymbol","$jscomp.Symbol","$jscomp.symbolCounter_","$jscomp.SYMBOL_PREFIX","configurable","writable","value","$jscomp.initSymbolIterator","next","done","Symbol","$jscomp.arrayIterator","t","uniqueId","requestCreatingNodeNames","nodes","nodeNames","$jscomp.makeIterator","node","subtreeContainsNodeName","computeLastKnownNetwork2Busy","incompleteRequestStarts","observedResourceRequests","endpoints","d","req","timestamp","i","endpoint","currentActive","constructor","config","snippetObserver","snippetEntries","performanceEntry","Map","Infinity","beforeXHRSendCb","onRequestCompletedCb","send","XMLHttpRequest","requestId","XMLHttpRequest.prototype.send","f","e","g","arguments","E","args","_registerListeners","patchFetch","beforeRequestCb","afterRequestCb","originalFetch","fetch","Promise","resolve","reject","$jscomp.arrayFromIterable","err","_registerPerformanceObserver","PerformanceObserver","entryList","entry","_networkRequestFinishedCallback","rescheduleTimer","firstConsistentlyInteractiveCore.computeLastKnownNetwork2Busy","taskEndTime","_longTaskFinishedCallback","entryTypes","observeResourceFetchingMutations","callback","mutationObserver","MutationObserver","mutations","mutation","document","attributes","childList","subtree","attributeFilter","activityTrackerUtils.observeResourceFetchingMutations","startSchedulingTimerTasks","lastLongTaskEnd","lastKnownNetwork2Busy","Math","earliestTime","clearTimeout","lastBusy","_checkTTI","searchStart","currentTime","minValue","_longTasks","maybeFCI","longTasks","C","getFirstConsistentlyInteractive","_beforeJSInitiatedRequestCallback","_afterJSInitiatedRequestCallback","_mutationObserverCallback","enumerable","get","_incompleteRequestStarts","moduleExport","opts","FirstConsistentlyInteractiveDetector","module","ttiPolyfill","Performance","mark","chrome","startMark","endMark","measure","perfObserver","performanceObserverCb","bind","observe","getMeasurementForGivenName","entries","getEntriesByName","length","getEntries","filter","disconnect","then","options","firstContentfulPaint","googleAnalytics","enable","timingVar","logPrefix","logging","timeToInteractive","assign","perf","supported","supportedPerformanceObserver","firstContentfulPaintCb","perfEmulated","Perfume","checkMetricName","console","warn","log","sendTiming","durationMs","toFixed","text","logFCP","supportedLongTask","timeToInteractiveCb","timeToInteractiveDuration","firstContentfulPaintDuration","ga","durationInteger","round"],"mappings":"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"}